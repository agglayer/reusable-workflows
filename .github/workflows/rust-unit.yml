name: Rust unit tests

on:
  workflow_call:
    inputs:
      use-foundry:
        description: "Install Foundry/Anvil"
        default: true
        required: false
        type: boolean

env:
  CARGO_TERM_COLOR: always
  REGISTRY: ghcr.io
  RUSTC_WRAPPER: sccache
  CARGO_NET_GIT_FETCH_WITH_CLI: true
  SCCACHE_GHA_ENABLED: true
  RUSTFLAGS: "-C target-cpu=native -C codegen-units=1"

jobs:
  setup:
    name: Setup Build Environment
    runs-on: ubuntu-latest-16-cores
    outputs:
      cache_key: ${{ steps.cache_key.outputs.key }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Generate cache key
        id: cache_key
        run: echo "key=${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}" >> $GITHUB_OUTPUT

      - name: Run sccache-cache
        uses: mozilla-actions/sccache-action@v0.0.9

      - uses: dtolnay/rust-toolchain@stable

      - uses: taiki-e/install-action@v2
        with:
          tool: protoc,nextest

      - name: Rust Cache
        uses: Swatinem/rust-cache@v2
        with:
          prefix-key: "v2-rust"
          shared-key: ${{ steps.cache_key.outputs.key }}
          # save-if: ${{ github.ref == 'refs/heads/main' }}
          cache-directories: |
            ~/.cache/sccache
            target/

  unit:
    name: Unit Tests
    needs: setup
    runs-on: ubuntu-latest-16-cores
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Run sccache-cache
        uses: mozilla-actions/sccache-action@v0.0.9

      - uses: dtolnay/rust-toolchain@stable

      - uses: taiki-e/install-action@v2
        with:
          tool: protoc,nextest

      - name: Install Anvil (for unit tests)
        if: ${{ inputs.use-foundry }}
        uses: foundry-rs/foundry-toolchain@v1

      - name: Rust Cache
        uses: Swatinem/rust-cache@v2
        with:
          prefix-key: "v2-rust"
          shared-key: ${{ needs.setup.outputs.cache_key }}
          cache-directories: |
            ~/.cache/sccache

      - name: Run unit tests
        run: |
          cargo nextest run --workspace
